<identifier> Class
<identifier> M
<symbol> {
<keyword> field
<identifier> Array
<identifier> jobtimes
<symbol> ;
<keyword> field
<keyword> int
<identifier> numjobs
<symbol> ;
<keyword> field
<keyword> int
<identifier> maxjobs
<symbol> ;
<keyword> constructor
<identifier> M
<identifier> new
<symbol> (
<keyword> int
<identifier> maxJ
<symbol> )
<symbol> {
<keyword> let
<identifier> maxjobs
<symbol> =
<identifier> maxJ
<symbol> ;
<keyword> let
<identifier> numjobs
<symbol> =
<integerConstant> 0
<symbol> ;
<keyword> let
<identifier> jobtimes
<symbol> =
<identifier> Array
<symbol> .
<identifier> new
<symbol> (
<identifier> maxJ
<symbol> )
<symbol> ;
<symbol> }
<keyword> method
<keyword> void
<identifier> add_job
<symbol> (
<keyword> int
<identifier> hours
<symbol> )
<symbol> {
<keyword> let
<identifier> jobetimes
<symbol> [
<identifier> numjobs
<symbol> ]
<symbol> =
<identifier> hours
<symbol> ;
<keyword> let
<identifier> numjobs
<symbol> =
<identifier> numjobs
<symbol> +
<integerConstant> 1
<symbol> ;
<keyword> return
<symbol> ;
<symbol> }
<keyword> method
<keyword> int
<identifier> getNumJobs
<symbol> (
<symbol> )
<symbol> {
<keyword> return
<identifier> numjobs
<symbol> ;
<symbol> }
<keyword> method
<keyword> int
<identifier> getJob
<symbol> (
<keyword> int
<identifier> k
<symbol> )
<symbol> {
<keyword> return
<identifier> jobtimes
<symbol> [
<identifier> k
<symbol> ]
<symbol> ;
<symbol> }
<keyword> method
<identifier> removeJob
<symbol> (
<symbol> )
<symbol> {
<keyword> var
<keyword> int
<identifier> i
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<integerConstant> 0
<symbol> ;
<keyword> while
<symbol> (
<identifier> i
<symbol> <
<symbol> (
<identifier> numjobs
<symbol> -
<integerConstant> 1
<symbol> )
<symbol> )
<symbol> {
<keyword> let
<identifier> jobtimes
<symbol> [
<identifier> i
<symbol> ]
<symbol> =
<identifier> jobtimes
<symbol> [
<identifier> i
<symbol> +
<integerConstant> 1
<symbol> ]
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<identifier> i
<symbol> +
<integerConstant> 1
<symbol> ;
<symbol> }
<keyword> let
<identifier> jobtimes
<symbol> [
<identifier> numjobs
<symbol> -
<integerConstant> 1
<symbol> ]
<symbol> =
<integerConstant> 0
<symbol> ;
<keyword> let
<identifier> numjobs
<symbol> =
<identifier> numjobs
<symbol> -
<integerConstant> 1
<symbol> ;
<keyword> return
<symbol> ;
<symbol> }
<keyword> method
<keyword> int
<identifier> totalJobTime
<symbol> (
<symbol> )
<symbol> {
<keyword> var
<keyword> int
<identifier> total
<symbol> ;
<keyword> var
<keyword> int
<identifier> i
<symbol> ;
<keyword> let
<identifier> total
<symbol> =
<integerConstant> 0
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<integerConstant> 0
<symbol> ;
<keyword> while
<symbol> (
<identifier> i
<symbol> <
<identifier> numjobs
<symbol> )
<symbol> {
<keyword> let
<identifier> total
<symbol> =
<symbol> (
<identifier> total
<symbol> +
<identifier> jobtimes
<symbol> [
<identifier> i
<symbol> ]
<symbol> )
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<identifier> i
<symbol> +
<integerConstant> 1
<symbol> ;
<symbol> }
<keyword> return
<identifier> total
<symbol> ;
<symbol> }
<symbol> }
<keyword> class
<identifier> Main
<symbol> {
<keyword> function
<keyword> void
<identifier> main
<symbol> (
<symbol> )
<symbol> {
<keyword> var
<identifier> M
<identifier> jobs
<symbol> ;
<keyword> var
<keyword> int
<identifier> i
<symbol> ;
<keyword> let
<identifier> jobs
<symbol> =
<identifier> M
<symbol> .
<identifier> new
<symbol> (
<integerConstant> 10
<symbol> )
<symbol> ;
<keyword> do
<identifier> jobs
<symbol> .
<identifier> add_job
<symbol> (
<integerConstant> 10
<symbol> )
<symbol> ;
<keyword> do
<identifier> jobs
<symbol> .
<identifier> add_job
<symbol> (
<integerConstant> 21
<symbol> )
<symbol> ;
<keyword> do
<identifier> jobs
<symbol> .
<identifier> add_job
<symbol> (
<integerConstant> 7
<symbol> )
<symbol> ;
<keyword> do
<identifier> jobs
<symbol> .
<identifier> add_job
<symbol> (
<integerConstant> 46
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printString
<symbol> (
<StringConstant> "Number of Jobs: "
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printInt
<symbol> (
<identifier> jobs
<symbol> .
<identifier> getNumJobs
<symbol> (
<symbol> )
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> println
<symbol> (
<symbol> )
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<integerConstant> 0
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printString
<symbol> (
<StringConstant> "All the job times: "
<symbol> )
<symbol> ;
<keyword> while
<symbol> (
<identifier> i
<symbol> <
<identifier> jobs
<symbol> .
<identifier> getNumJobs
<symbol> (
<symbol> )
<symbol> )
<symbol> {
<keyword> do
<identifier> Output
<symbol> .
<identifier> printInt
<symbol> (
<identifier> jobs
<symbol> .
<identifier> getJob
<symbol> (
<identifier> i
<symbol> )
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printChar
<symbol> (
<integerConstant> 32
<symbol> )
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<identifier> i
<symbol> +
<integerConstant> 1
<symbol> ;
<symbol> }
<keyword> do
<identifier> Output
<symbol> .
<identifier> println
<symbol> (
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printString
<symbol> (
<StringConstant> "Total time: "
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printInt
<symbol> (
<identifier> jobs
<symbol> .
<identifier> totalJobTime
<symbol> (
<symbol> )
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> println
<symbol> (
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printString
<symbol> (
<StringConstant> "After removing 2 jobs: "
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> println
<symbol> (
<symbol> )
<symbol> ;
<keyword> do
<identifier> jobs
<symbol> .
<identifier> removeJob
<symbol> (
<symbol> )
<symbol> ;
<keyword> do
<identifier> jobs
<symbol> .
<identifier> removeJob
<symbol> (
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printString
<symbol> (
<StringConstant> "Number of Jobs: "
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printInt
<symbol> (
<identifier> jobs
<symbol> .
<identifier> getNumJobs
<symbol> (
<symbol> )
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> println
<symbol> (
<symbol> )
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<integerConstant> 0
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printString
<symbol> (
<StringConstant> "All the job times: "
<symbol> )
<symbol> ;
<keyword> while
<symbol> (
<identifier> i
<symbol> <
<identifier> jobs
<symbol> .
<identifier> getNumJobs
<symbol> (
<symbol> )
<symbol> )
<symbol> {
<keyword> do
<identifier> Output
<symbol> .
<identifier> printInt
<symbol> (
<identifier> jobs
<symbol> .
<identifier> getJob
<symbol> (
<identifier> i
<symbol> )
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printChar
<symbol> (
<integerConstant> 32
<symbol> )
<symbol> ;
<keyword> let
<identifier> i
<symbol> =
<identifier> i
<symbol> +
<integerConstant> 1
<symbol> ;
<symbol> }
<keyword> do
<identifier> Output
<symbol> .
<identifier> println
<symbol> (
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printString
<symbol> (
<StringConstant> "Total time: "
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> printInt
<symbol> (
<identifier> jobs
<symbol> .
<identifier> totalJobTime
<symbol> (
<symbol> )
<symbol> )
<symbol> ;
<keyword> do
<identifier> Output
<symbol> .
<identifier> println
<symbol> (
<symbol> )
<symbol> ;
<keyword> return
<symbol> ;
<symbol> }
<symbol> }
